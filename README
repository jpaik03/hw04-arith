/*
 *      README
 *      Kevin Lu (klu07), Justin Paik (jpaik03)
 *      October 21, 2025
 *      arith
 * 
 *      Provides additional information about the implementation process by
 *      the programmers.
 */

ARCHITECTURE
    - Files taken from previous assignments:
        - uarray2.c/h
        - uarray2b.c/h
        - a2plain.c/h
        - a2blocked.c/h
        - a2methods.c/h

    - Related but not included files:
        - ppmdiff.c/h: used for testing the output of our program

    - Given files:
        - 40image.c/h: provided and handles command-line parsing for the 
        40image executable
        - compress40.c/h: boiler-plate code provided, stores the respsective
        arrays for each intermediate step fo compression and decompression
        and calls the respective functions in the correct order. Cleans up and
        frees memory. Calls fucntions in the order of modules from the below
        interfaces.

    - New files created:
        - bitpack.c: holds the implementation of the bitpack module
        - readWriteImage.c/h: holds the functions that perform initial read and
        final write of ppm. Handles potential trimming of image.
        - pixelOperations.c/h: holds functions that deal with data 
        corresponding with each pixel, specifically to convert between Pixel 
        and Component values.
        - blockOperations.c/h: holds functions that deal with data
        corresponding with each 2x2 block of pixels, specifically to convert
        between Block and DCT values.
        - codewords.c/h: holds functions that deal with data 
        corresponding with each codeword, specifically to convert between
        Codeword and compressed bit values.
        
    - Module call order:
        - readWriteImage
        - pixelOperations
        - blockOperations
        - codewords
    
    - DESIGN DECISIONS:
        - MODULE STRUCTURE:
            - We ended up deciding to split our modules up based on the 
            different data types that we were dealing with at each step of the 
            process, secret keeping the details of each data type within its 
            respective module, and keeping groups of a singular function 
            together.
            - For example, the readWriteImage module only deals with reading and 
            writing the image. The pixelOperations module only deals with
            converting between pixel and CVCS values. The blockOperations module
            only deals with converting between information based on the 2x2 
            blocks of pixels and DCT values. The codewords module only deals 
            with converting between codewords and compressed bit values.

        - DATA STRUCTURE USE:
            - Another main motive for this structure was the types of data 
            structures we used. To start off, we are creating these data 
            structures in compress40.h so that they can be shared across 
            modules. For representing pixel information, specifically the 
            resulting CVCS values, we used a uarray2b which sets us up nicely 
            for the next step of converting to DCT values since we will be 
            working with 2x2 blocks of pixels. This uarray2 holds pixel structs
            with this information and is put in the .h which allows the 
            blockOperation module to fetch the individual pixel information 
            needed for average calculations. For representing blocks of pixels,
            we used a uarray2 of structs holding DCT values. This allows us to 
            easily access each block's DCT values when 
            converting to codewords in the next step.

        - FUNCTION PASSING:
            - Another design decision we made was to pass in the correct 
            methods when dealing with blocked or plain arrays. This was 
            necessary since we were secret keeping the details of the data 
            structures within their respective modules, and so the modules 
            dealing with the data structures needed to know how to access them.
            - For example, in the pixelOperations module, when we are dealing
            with a uarray2b holding pixel information, we need to pass in the
            blocked methods so that the module can access the data correctly.
            - Similarly, in the blockOperations module, when we are dealing
            with a uarray2 holding block information, we need to pass in the
            plain methods so that the module can access the data correctly.

ACKNOWLEDGEMENTS:
    - TA office hours for: 
        - helping figure out how to split up the modules
        - the implications of encaspulation and secret keeping in our
        program
            - how to have information like a struct be shared across
            modules
        - the need to pass in methods and and change it when dealing 
        with blocked or plain arrays
    - Lecture slides for bit packing, shifting, and masking

IMPLEMENTATION:
    - To our knowledge, everything should be correctly implemented.

TIME SPENT:
    - Analyzing problems: 12 hours
    - Solving problems: 28 hours
